---
description: 
globs: 
alwaysApply: false
---
以下是您提供的 Next.js 最佳实践规则的中文翻译，涵盖项目结构、组件使用、性能优化、数据获取、路由管理、表单验证和状态管理等方面：

---

**Next.js 最佳实践**

---

### 📁 项目结构

-采用 App Router 的目录结构
-将路由相关组件放置在 `app` 目录中
-将可复用组件放置在 `components` 目录中
-将工具函数和辅助函数放置在 `lib` 目录中
-目录命名使用小写字母和短横线（例如：`components/auth-wizard`）

---

### 🧩 组件使用

 默认使用服务器组件（Server Components。
 客户端组件需显式声明 `'use client'。
 使用 `Suspense` 包裹客户端组件，并提供备用内。
 对于非关键组件，使用动态加载（dynamic loading。
 实现适当的错误边界（Error Boundaries。
 将静态内容和接口定义放置在文件末。

---

### ⚡ 性能优化

 优化图片：使用 WebP 格式，提供尺寸数据，启用懒加。
 尽量减少使用 `useEffect` 和 `setState。
 尽可能使用服务器组件（RSC。
 对于非关键组件，使用动态加。
 实施适当的缓存策。

---

### 🔄 数据获取
- 尽可能在服务器组件中进行数据取。- 对数据获取过程进行适当的错误理。- 使用合适的缓存略。- 妥善处理加载和错误态。

---

### 🧭 路由管理
- 遵循 App Router 约定。
- 为路由实现适当的加载和错误状处理。
- 合理使用动路由。
- 在需要时处理并路由。

---

### 📝 表单与验

- 使用 Zod 进行单验证
- 实现适当的服务端验证
- 妥善处理单错误
- 在表单提交期间显示载状态。

---

### 🧠 状态理

- 最小化客户端态的使。
- 谨慎使用 React Cotex。
- 优先使用务器状。
- 实现适当的加状态处理。

